From 717083123cc79ab41c69629af584f89547797072 Mon Sep 17 00:00:00 2001
From: qianlongxu <qianlongxu@gmail.com>
Date: Fri, 29 Jul 2022 12:57:50 +0800
Subject: [PATCH 08/16] add AV_PKT_FLAG_NEW_SEG

---
 libavcodec/avcodec.h    |   1 +
 libavformat/concatdec.c | 107 ++++++++++++++++++++++++++++++++++------
 2 files changed, 92 insertions(+), 16 deletions(-)

diff --git a/libavcodec/avcodec.h b/libavcodec/avcodec.h
index fb0c6fa..0c1eefe 100644
--- a/libavcodec/avcodec.h
+++ b/libavcodec/avcodec.h
@@ -1480,6 +1480,7 @@ typedef struct AVPacket {
  */
 #define AV_PKT_FLAG_DISPOSABLE 0x0010
 
+#define AV_PKT_FLAG_NEW_SEG 0x8000 ///< The packet is the first packet from a source in concat
 
 enum AVSideDataParamChangeFlags {
     AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT  = 0x0001,
diff --git a/libavformat/concatdec.c b/libavformat/concatdec.c
index bbe1313..f05e935 100644
--- a/libavformat/concatdec.c
+++ b/libavformat/concatdec.c
@@ -65,6 +65,8 @@ typedef struct {
     ConcatMatchMode stream_match_mode;
     unsigned auto_convert;
     int segment_time_metadata;
+    AVDictionary *options;
+    int error;
 } ConcatContext;
 
 static int concat_probe(AVProbeData *probe)
@@ -318,27 +320,67 @@ static int open_file(AVFormatContext *avf, unsigned fileno)
 {
     ConcatContext *cat = avf->priv_data;
     ConcatFile *file = &cat->files[fileno];
+    AVFormatContext *new_avf = NULL;
     int ret;
+    AVDictionary *tmp = NULL;
+    AVDictionaryEntry *t = NULL;
+    int fps_flag = 0;
 
-    if (cat->avf)
-        avformat_close_input(&cat->avf);
-
-    cat->avf = avformat_alloc_context();
-    if (!cat->avf)
+    new_avf = avformat_alloc_context();
+    if (!new_avf)
         return AVERROR(ENOMEM);
 
-    cat->avf->flags |= avf->flags & ~AVFMT_FLAG_CUSTOM_IO;
-    cat->avf->interrupt_callback = avf->interrupt_callback;
+    new_avf->flags |= avf->flags & ~AVFMT_FLAG_CUSTOM_IO;
 
-    if ((ret = ff_copy_whiteblacklists(cat->avf, avf)) < 0)
+#ifdef FF_API_LAVF_KEEPSIDE_FLAG
+    if (avf->flags & AVFMT_FLAG_KEEP_SIDE_DATA) {
+        new_avf->flags |= AVFMT_FLAG_KEEP_SIDE_DATA;
+    }
+#endif
+    new_avf->interrupt_callback = avf->interrupt_callback;
+
+    if ((ret = ff_copy_whiteblacklists(new_avf, avf)) < 0)
         return ret;
 
-    if ((ret = avformat_open_input(&cat->avf, file->url, NULL, NULL)) < 0 ||
-        (ret = avformat_find_stream_info(cat->avf, NULL)) < 0) {
+    if (cat->options)
+        av_dict_copy(&tmp, cat->options, 0);
+
+    av_dict_set_int(&tmp, "cur_file_no", fileno, 0);
+
+    t = av_dict_get(tmp, "skip-calc-frame-rate", NULL, AV_DICT_MATCH_CASE);
+    if (t) {
+        fps_flag = (int) strtol(t->value, NULL, 10);
+        if (fps_flag > 0) {
+            av_dict_set_int(&new_avf->metadata, "skip-calc-frame-rate", fps_flag, 0);
+        }
+    }
+
+    t = av_dict_get(tmp, "nb-streams", NULL, AV_DICT_MATCH_CASE);
+    if (t) {
+        int nb_streams = (int) strtol(t->value, NULL, 10);
+        if (nb_streams > 0) {
+            av_dict_set_int(&new_avf->metadata, "nb-streams", nb_streams, 0);
+            av_dict_set_int(&cat->options, "nb-streams", 0, 0);
+        }
+    }
+
+    ret = avformat_open_input(&new_avf, file->url, NULL, &tmp);
+    av_dict_free(&tmp);
+    if (ret < 0 ||
+        (ret = avformat_find_stream_info(new_avf, NULL)) < 0) {
         av_log(avf, AV_LOG_ERROR, "Impossible to open '%s'\n", file->url);
-        avformat_close_input(&cat->avf);
+        avformat_close_input(&new_avf);
         return ret;
     }
+
+    if (!new_avf)
+        return 0;
+
+    if (cat->avf)
+        avformat_close_input(&cat->avf);
+
+    avf->bit_rate = new_avf->bit_rate;
+    cat->avf      = new_avf;
     cat->cur_file = file;
     if (file->start_time == AV_NOPTS_VALUE)
         file->start_time = !fileno ? 0 :
@@ -380,11 +422,12 @@ static int concat_read_close(AVFormatContext *avf)
     }
     if (cat->avf)
         avformat_close_input(&cat->avf);
+    av_dict_free(&cat->options);
     av_freep(&cat->files);
     return 0;
 }
 
-static int concat_read_header(AVFormatContext *avf)
+static int concat_read_header(AVFormatContext *avf, AVDictionary **options)
 {
     ConcatContext *cat = avf->priv_data;
     AVBPrint bp;
@@ -394,6 +437,9 @@ static int concat_read_header(AVFormatContext *avf)
     ConcatFile *file = NULL;
     int64_t ret, time = 0;
 
+    if (options && *options)
+        av_dict_copy(&cat->options, *options, 0);
+
     av_bprint_init(&bp, 0, AV_BPRINT_SIZE_UNLIMITED);
 
     while ((ret = ff_read_line_to_bprint_overwrite(avf->pb, &bp)) >= 0) {
@@ -565,6 +611,7 @@ static int packet_after_outpoint(ConcatContext *cat, AVPacket *pkt)
     return 0;
 }
 
+#define CONCAT_MAX_OPEN_TRY 3
 static int concat_read_packet(AVFormatContext *avf, AVPacket *pkt)
 {
     ConcatContext *cat = avf->priv_data;
@@ -572,6 +619,13 @@ static int concat_read_packet(AVFormatContext *avf, AVPacket *pkt)
     int64_t delta;
     ConcatStream *cs;
     AVStream *st;
+    int try_counter = 0;
+    int is_new_st = 0;
+
+    if (cat->error) {
+        ret = cat->error;
+        return ret;
+    }
 
     if (cat->eof)
         return AVERROR_EOF;
@@ -582,12 +636,20 @@ static int concat_read_packet(AVFormatContext *avf, AVPacket *pkt)
     while (1) {
         ret = av_read_frame(cat->avf, pkt);
         if (ret == AVERROR_EOF) {
+            is_new_st = 1;
             if ((ret = open_next_file(avf)) < 0)
-                return ret;
+                goto open_fail;
             continue;
         }
-        if (ret < 0)
+        if (ret < 0) {
+            if (avf->pb && cat->avf->pb)
+                avf->pb->error = cat->avf->pb->error;
             return ret;
+        }
+        if (is_new_st) {
+            pkt->flags |= AV_PKT_FLAG_NEW_SEG;
+            is_new_st = 0;
+        }
         if ((ret = match_streams(avf)) < 0) {
             av_packet_unref(pkt);
             return ret;
@@ -595,7 +657,7 @@ static int concat_read_packet(AVFormatContext *avf, AVPacket *pkt)
         if (packet_after_outpoint(cat, pkt)) {
             av_packet_unref(pkt);
             if ((ret = open_next_file(avf)) < 0)
-                return ret;
+                goto open_fail;
             continue;
         }
         cs = &cat->cur_file->streams[pkt->stream_index];
@@ -604,6 +666,16 @@ static int concat_read_packet(AVFormatContext *avf, AVPacket *pkt)
             continue;
         }
         break;
+open_fail:
+        ++try_counter;
+        if (try_counter > CONCAT_MAX_OPEN_TRY) {
+            cat->error = ret;
+            if (avf->pb && ret != AVERROR_EOF)
+               avf->pb->error = ret;
+            return AVERROR_EOF;
+        }
+
+        av_log(avf, AV_LOG_WARNING, "open_next_file() failed (%d)\n", try_counter);
     }
     if ((ret = filter_packet(avf, cs, pkt)))
         return ret;
@@ -728,6 +800,9 @@ static int concat_seek(AVFormatContext *avf, int stream,
     AVFormatContext *cur_avf_saved = cat->avf;
     int ret;
 
+    /* reset error/complete state */
+    cat->error = 0;
+
     if (!cat->seekable)
         return AVERROR(ESPIPE); /* XXX: can we use it? */
     if (flags & (AVSEEK_FLAG_BYTE | AVSEEK_FLAG_FRAME))
@@ -775,7 +850,7 @@ AVInputFormat ff_concat_demuxer = {
     .long_name      = NULL_IF_CONFIG_SMALL("Virtual concatenation script"),
     .priv_data_size = sizeof(ConcatContext),
     .read_probe     = concat_probe,
-    .read_header    = concat_read_header,
+    .read_header2   = concat_read_header,
     .read_packet    = concat_read_packet,
     .read_close     = concat_read_close,
     .read_seek2     = concat_seek,
-- 
2.30.1 (Apple Git-130)

