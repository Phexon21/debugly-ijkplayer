From ad70425a954678c0cbcb779b15d2bc3cd0d36f0f Mon Sep 17 00:00:00 2001
From: qianlongxu <qianlongxu@gmail.com>
Date: Mon, 12 Jun 2023 16:15:15 +0800
Subject: [PATCH 05/17] hls support discontinuity

---
 libavformat/hls.c | 60 +++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 53 insertions(+), 7 deletions(-)

diff --git a/libavformat/hls.c b/libavformat/hls.c
index bf7fdc1..2e3bff6 100644
--- a/libavformat/hls.c
+++ b/libavformat/hls.c
@@ -73,6 +73,8 @@ enum KeyType {
 };
 
 struct segment {
+    int64_t previous_duration;
+    int64_t start_time;
     int64_t duration;
     int64_t url_offset;
     int64_t size;
@@ -686,6 +688,7 @@ static int open_url(AVFormatContext *s, AVIOContext **pb, const char *url,
 
     av_dict_copy(&tmp, *opts, 0);
     av_dict_copy(&tmp, opts2, 0);
+    av_dict_set(&tmp, "seekable", "1", 0);
 
     if (is_http && c->http_persistent && *pb) {
         ret = open_url_keepalive(c->ctx, pb, url, &tmp);
@@ -726,6 +729,8 @@ static int open_url(AVFormatContext *s, AVIOContext **pb, const char *url,
 static int parse_playlist(HLSContext *c, const char *url,
                           struct playlist *pls, AVIOContext *in)
 {
+    int64_t previous_duration1 = 0, previous_duration = 0, total_duration = 0;
+
     int ret = 0, is_segment = 0, is_variant = 0;
     int64_t duration = 0;
     enum KeyType key_type = KEY_NONE;
@@ -797,6 +802,7 @@ static int parse_playlist(HLSContext *c, const char *url,
         pls->finished = 0;
         pls->type = PLS_TYPE_UNSPECIFIED;
     }
+    int start_seq_no = -1;
     while (!avio_feof(in)) {
         ff_get_chomp_line(in, line, sizeof(line));
         if (av_strstart(line, "#EXT-X-STREAM-INF:", &ptr)) {
@@ -846,7 +852,11 @@ static int parse_playlist(HLSContext *c, const char *url,
                         "INT64_MAX/2, mask out the highest bit\n");
                 seq_no &= INT64_MAX/2;
             }
-            pls->start_seq_no = seq_no;
+            /* Some buggy HLS servers write #EXT-X-MEDIA-SEQUENCE more than once */
+            if (start_seq_no < 0) {
+                start_seq_no = seq_no;
+                pls->start_seq_no = seq_no;
+            }
         } else if (av_strstart(line, "#EXT-X-PLAYLIST-TYPE:", &ptr)) {
             ret = ensure_playlist(c, &pls, url);
             if (ret < 0)
@@ -911,6 +921,8 @@ static int parse_playlist(HLSContext *c, const char *url,
         } else if (av_strstart(line, "#EXT-X-ENDLIST", &ptr)) {
             if (pls)
                 pls->finished = 1;
+        } else if (av_strstart(line, "#EXT-X-DISCONTINUITY", &ptr)) {
+            previous_duration = previous_duration1;
         } else if (av_strstart(line, "#EXTINF:", &ptr)) {
             is_segment = 1;
             duration   = atof(ptr) * AV_TIME_BASE;
@@ -986,6 +998,11 @@ static int parse_playlist(HLSContext *c, const char *url,
                                     " set to default value to 1ms.\n", seg->url);
                     duration = 0.001 * AV_TIME_BASE;
                 }
+                previous_duration1 += duration;
+                seg->previous_duration = previous_duration;
+                seg->start_time = total_duration;
+                total_duration += duration;
+
                 seg->duration = duration;
                 seg->key_type = key_type;
                 dynarray_add(&pls->segments, &pls->n_segments, seg);
@@ -2292,6 +2309,7 @@ static int hls_read_packet(AVFormatContext *s, AVPacket *pkt)
          * stream */
         if (pls->needed && !pls->pkt->data) {
             while (1) {
+                int64_t pkt_ts = AV_NOPTS_VALUE;
                 int64_t ts_diff;
                 AVRational tb;
                 struct segment *seg = NULL;
@@ -2305,12 +2323,40 @@ static int hls_read_packet(AVFormatContext *s, AVPacket *pkt)
                     if (pls->is_id3_timestamped && pls->pkt->stream_index == 0) {
                         /* audio elementary streams are id3 timestamped */
                         fill_timing_for_id3_timestamped_stream(pls);
+                    } else {
+                        //discontinuity:ts pts need add up.
+                        if (pls->finished) {
+                            int seq_no = pls->cur_seq_no - pls->start_seq_no;
+                            if (seq_no < pls->n_segments && s->streams[pkt->stream_index]) {
+                                struct segment *seg = pls->segments[seq_no];
+                                if (seg->previous_duration > 0) {
+                                    int64_t pred = av_rescale_q(seg->previous_duration,
+                                                            AV_TIME_BASE_Q,
+                                                            s->streams[pkt->stream_index]->time_base);
+                                    int64_t max_ts = av_rescale_q(seg->start_time + seg->duration,
+                                                                AV_TIME_BASE_Q,
+                                                                s->streams[pkt->stream_index]->time_base);
+                                    /* EXTINF duration is not precise enough */
+                                    max_ts += 2 * AV_TIME_BASE;
+                                    if (s->start_time > 0) {
+                                        max_ts += av_rescale_q(s->start_time,
+                                                            AV_TIME_BASE_Q,
+                                                            s->streams[pkt->stream_index]->time_base);
+                                    }
+                                    if (pls->pkt->dts != AV_NOPTS_VALUE && pls->pkt->dts + pred < max_ts) pls->pkt->dts += pred;
+                                    if (pls->pkt->pts != AV_NOPTS_VALUE && pls->pkt->pts + pred < max_ts) pls->pkt->pts += pred;
+                                }
+                            }
+                        }
                     }
 
-                    if (c->first_timestamp == AV_NOPTS_VALUE &&
-                        pls->pkt->dts       != AV_NOPTS_VALUE)
-                        c->first_timestamp = av_rescale_q(pls->pkt->dts,
-                            get_timebase(pls), AV_TIME_BASE_Q);
+                    if (pls->pkt->pts != AV_NOPTS_VALUE)
+                        pkt_ts = pls->pkt->pts;
+                    else if (pls->pkt->dts != AV_NOPTS_VALUE)
+                        pkt_ts = pls->pkt->dts;
+
+                    if (c->first_timestamp == AV_NOPTS_VALUE && pkt_ts != AV_NOPTS_VALUE)
+                        c->first_timestamp = av_rescale_q(pkt_ts, get_timebase(pls), AV_TIME_BASE_Q);
                 }
 
                 seg = current_segment(pls);
@@ -2327,13 +2373,13 @@ static int hls_read_packet(AVFormatContext *s, AVPacket *pkt)
                 if (pls->seek_stream_index < 0 ||
                     pls->seek_stream_index == pls->pkt->stream_index) {
 
-                    if (pls->pkt->dts == AV_NOPTS_VALUE) {
+                    if (pkt_ts == AV_NOPTS_VALUE) {
                         pls->seek_timestamp = AV_NOPTS_VALUE;
                         break;
                     }
 
                     tb = get_timebase(pls);
-                    ts_diff = av_rescale_rnd(pls->pkt->dts, AV_TIME_BASE,
+                    ts_diff = av_rescale_rnd(pkt_ts, AV_TIME_BASE,
                                             tb.den, AV_ROUND_DOWN) -
                             pls->seek_timestamp;
                     if (ts_diff >= 0 && (pls->seek_flags  & AVSEEK_FLAG_ANY ||
-- 
2.39.3 (Apple Git-145)

